package primus

import (
	"encoding/hex"
	"fmt"
	"github.com/samber/lo"
	"testing"
)

func TestParse(t *testing.T) {
	bs := mustDecode("e80200003b000400010000000210240031313739313934382d616430332d343635342d383538642d346630636330303863326563541050014c010000571000018e2c795d84a60fe4e8c04cd2a0333a9e087433339925c2ef6a83affc9a4b1b46d7e448a4b6c8355becf728fed548f01931ff4f96d5695fc1a21aed03ad6f7e42fc6815f0243262a107bff2c3c64b8990f7ee52f5478e24bd9c2d8d6959a4c8cec28aeedca07cc041c1868b290815b18c0e8933512cbc18191294deafd8534cbb0d053065acd5826835febcba99c1c57b22f618f13901e7b5369498fe8e64ca2eec15468743b2754fb4bba35f40d37d5b9f7ac1fda90bcf6e921273a1b673eeabcb00581afdde5eeea9705e3a578b294824474482d92de44219d70a3bbf6bba1c4e12caa7406477c84078e56bcc703f1566a05e46dfe88f495a711fadf981944607010800f8ac10670000000002103500696e746567726974794b65794e616d652d31383866313637382d663466332d343730642d393831632d37343661323033656661353700000056105a003058300c06082a8648ce3d04030205000348003045022100c7d05c535e6b7911f735b97082002e5fb7a1f79aec2d62a2390a4a96fbb59cdf0220439a5ca35dc93bce8bbd39205189126b0dd238f3189a711203087328238e8ecb0000571000018e2c795d84a60fe4e8c04cd2a0333a9e087433339925c2ef6a83affc9a4b1b46d7e448a4b6c8355becf728fed548f01931ff4f96d5695fc1a21aed03ad6f7e42fc6815f0243262a107bff2c3c64b8990f7ee52f5478e24bd9c2d8d6959a4c8cec28aeedca07cc041c1868b290815b18c0e8933512cbc18191294deafd8534cbb0d053065acd5826835febcba99c1c57b22f618f13901e7b5369498fe8e64ca2eec15468743b2754fb4bba35f40d37d5b9f7ac1fda90bcf6e921273a1b673eeabcb00581afdde5eeea9705e3a578b294824474482d92de44219d70a3bbf6bba1c4e12caa7406477c84078e56bcc703f1566a05e46dfe88f495a711fadf9819446")

	resp := new(ApprovalToken)
	lo.Must0(resp.Deserialize(bs))

	if resp.Operation != ApprovalTokenOp.SIGN {
		panic("invalid op")
	}

	if hex.EncodeToString(resp.EkaPayload) != "8e2c795d84a60fe4e8c04cd2a0333a9e087433339925c2ef6a83affc9a4b1b46d7e448a4b6c8355becf728fed548f01931ff4f96d5695fc1a21aed03ad6f7e42fc6815f0243262a107bff2c3c64b8990f7ee52f5478e24bd9c2d8d6959a4c8cec28aeedca07cc041c1868b290815b18c0e8933512cbc18191294deafd8534cbb0d053065acd5826835febcba99c1c57b22f618f13901e7b5369498fe8e64ca2eec15468743b2754fb4bba35f40d37d5b9f7ac1fda90bcf6e921273a1b673eeabcb00581afdde5eeea9705e3a578b294824474482d92de44219d70a3bbf6bba1c4e12caa7406477c84078e56bcc703f1566a05e46dfe88f495a711fadf9819446" {
		panic("invalid eka")
	}

	if resp.KeyName != "11791948-ad03-4654-858d-4f0cc008c2ec" {
		panic("invalid key")
	}

	if hex.EncodeToString(resp.Timestamp) != "4c010000571000018e2c795d84a60fe4e8c04cd2a0333a9e087433339925c2ef6a83affc9a4b1b46d7e448a4b6c8355becf728fed548f01931ff4f96d5695fc1a21aed03ad6f7e42fc6815f0243262a107bff2c3c64b8990f7ee52f5478e24bd9c2d8d6959a4c8cec28aeedca07cc041c1868b290815b18c0e8933512cbc18191294deafd8534cbb0d053065acd5826835febcba99c1c57b22f618f13901e7b5369498fe8e64ca2eec15468743b2754fb4bba35f40d37d5b9f7ac1fda90bcf6e921273a1b673eeabcb00581afdde5eeea9705e3a578b294824474482d92de44219d70a3bbf6bba1c4e12caa7406477c84078e56bcc703f1566a05e46dfe88f495a711fadf981944607010800f8ac10670000000002103500696e746567726974794b65794e616d652d31383866313637382d663466332d343730642d393831632d373436613230336566613537000000" {
		panic("invalid timestamp")
	}

	if resp.TimestampSignature == nil {
		panic("invalid signature nil")
	}

	if hex.EncodeToString(resp.TimestampSignature.signature) != "3045022100c7d05c535e6b7911f735b97082002e5fb7a1f79aec2d62a2390a4a96fbb59cdf0220439a5ca35dc93bce8bbd39205189126b0dd238f3189a711203087328238e8ecb" {
		panic("invalid signature")
	}

	if resp.TimestampSignature.signAlgorithm != "SHA256withECDSA" {
		panic("invalid signature alg")
	}

	signatureKeyName, seconds := DecodePrimusTimestamp(resp.Timestamp)
	fmt.Println(signatureKeyName, seconds)

	if seconds != 1729146104 {
		panic("invalid parse timestamp")
	}

	//pp := new(Payload)
	//lo.Must0(pp.Deserialize(resp.Timestamp))
	//
	//spew.Dump(pp.getParts())
}
