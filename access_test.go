package primus

import (
	"bytes"
	"encoding/hex"
	"github.com/davecgh/go-spew/spew"
	"github.com/samber/lo"
	"testing"
)

func TestPayloadPart(t *testing.T) {
	var c [65534]byte
	for i := 0; i < len(c); i++ {
		c[i] = 22
	}
	p := NewPayloadPart(123, c[:])
	if p.Size() != 65540 {
		panic("invalid")
	}
	bs := p.Serialize()
	if !bytes.Equal(bs[:4], []byte{123, 0, 254, 255}) {
		panic("invalid data")
	}
	if !bytes.Equal(bs[len(bs)-2:], []byte{0, 0}) {
		panic("invalid data")
	}
	for i := 4; i < len(bs)-2; i++ {
		if bs[i] != 22 {
			panic("invalid data")
		}
	}
}

func TestPayloadPart2(t *testing.T) {
	var c [48]byte
	for i := 0; i < len(c); i++ {
		c[i] = 22
	}
	p := NewPayloadPart(123, c[:])
	if p.Size() != 52 {
		panic("invalid")
	}
	bs := p.Serialize()
	if hex.EncodeToString(bs) != "7b003000161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616" {
		panic("invalid data")
	}
}

func TestDecode(t *testing.T) {
	bs := mustDecode("4e107801740100005900040001000000550004000000000055000400000000005a00040001000000021005005369676e310000005b000400010000000300040003000000021001004200000052105b003059301306072a8648ce3d020106082a8648ce3d03010703420004d1cc1d61cfff1899f8b403190d53e372e74b92cd78809877a7fc8b424e2f40d4676654696e664d6d7c786e41f63ee7405e26da13356c8deb296bf7af8f826ec600021001004300000052105b003059301306072a8648ce3d020106082a8648ce3d03010703420004003d7d5cd2cf601b139239400af86566ff8abd9d490b784870b340700eb1b57ad5abf5c9647f1861a75ad4b331e9bd2d1fc6f6fe804734f7ab053e1bb08be51500021001004f00000052105b003059301306072a8648ce3d020106082a8648ce3d03010703420004f2eac1d2dcc3abc5b2bf60637d709d4cbe6446b3b6cbd2e907a5f55e37b6c5195d28fe1915a39ccc4920404eb26ccaa7b44f431a4981de47b8d7c1ce1cb81a52004f100c0008000000590004000000000050100c0008000000590004000000000051107801740100005900040001000000550004000000000055000400000000005a00040001000000021005005369676e310000005b000400010000000300040003000000021001004200000052105b003059301306072a8648ce3d020106082a8648ce3d03010703420004d1cc1d61cfff1899f8b403190d53e372e74b92cd78809877a7fc8b424e2f40d4676654696e664d6d7c786e41f63ee7405e26da13356c8deb296bf7af8f826ec600021001004300000052105b003059301306072a8648ce3d020106082a8648ce3d03010703420004003d7d5cd2cf601b139239400af86566ff8abd9d490b784870b340700eb1b57ad5abf5c9647f1861a75ad4b331e9bd2d1fc6f6fe804734f7ab053e1bb08be51500021001004f00000052105b003059301306072a8648ce3d020106082a8648ce3d03010703420004f2eac1d2dcc3abc5b2bf60637d709d4cbe6446b3b6cbd2e907a5f55e37b6c5195d28fe1915a39ccc4920404eb26ccaa7b44f431a4981de47b8d7c1ce1cb81a5200")

	acc := new(Access)
	lo.Must0(acc.Deserialize(bs))
	spew.Dump(acc)
}
